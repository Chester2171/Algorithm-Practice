//Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
//
//Symbol       Value
//I             1
//V             5
//X             10
//L             50
//C             100
//D             500
//M             1000
//
//For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. 
//The number twenty seven is written as XXVII, which is XX + V + II.
//Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. 
//Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. 
//There are six instances where subtraction is used:
//
//I can be placed before V (5) and X (10) to make 4 and 9. 
//X can be placed before L (50) and C (100) to make 40 and 90. 
//C can be placed before D (500) and M (1000) to make 400 and 900.
//Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.


public class Solution 
{
    public int RomanToInt(string s) 
    {
        int[] numerals = new int[s.Length];
        int output = 0;
        
        for (int i = 0; i < s.Length; i++)
        {
            if (s[i] == 'I') numerals[i] = 1;
            else if (s[i] == 'V') numerals[i] = 5;
            else if (s[i] == 'X') numerals[i] = 10;
            else if (s[i] == 'L') numerals[i] = 50;
            else if (s[i] == 'C') numerals[i] = 100;
            else if (s[i] == 'D') numerals[i] = 500;
            else if (s[i] == 'M') numerals[i] = 1000;
        }
        
        for (int i = 0; i < numerals.Length; i++)
        {
            if (i + 1 < numerals.Length && numerals[i] < numerals[i + 1])
            {
                output += numerals[i + 1] - numerals[i];
                i++;
            }
            else
            {
                output += numerals[i];
            }
        }
        return output;
    }
}

// Tim Weigel and Richard Lee helped me find the solution to this algorithm. I also walked through this one as if I was doing a whiteboard problem (unless I was asking for help).
